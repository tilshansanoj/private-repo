services:
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "{{ nginx_port }}:{{ nginx_port }}"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
      - backend
    depends_on:
      - web
      - api
    restart: unless-stopped

  web:
    image: {{ web_image }}:{{ tag_web }}
    ports:
      - "{{ web_port }}:{{ web_port }}"
    command: npm start
    environment:
      - PORT={{ web_port }}
      - API_HOST={{ api_host }}
    networks:
      - backend
    depends_on:
      - api
    restart: unless-stopped

  api:
    image: {{ api_image }}:{{ tag_api }}
    deploy:
      replicas: {{ api_replicas }}
    ports:
      - "{{ api_ports }}"
    command: npm start
    environment:
      - PORT={{ api_env_ports }}
      - DB={{ api_db }}
    networks:
      - backend
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:15.1-alpine
    volumes:
      - {{ db_data_mount }}:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: {{ db_user }}
      POSTGRES_PASSWORD: {{ db_pass }}
      POSTGRES_DB: {{ db_name }}
    ports:
      - 5432:5432
    networks:
      - backend
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
