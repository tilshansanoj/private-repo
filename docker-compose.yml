services:

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "${PORT}:${PORT}" # Exposes Nginx on port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Mount custom Nginx configuration
    networks:
      - frontend
      - backend # Connect to both networks to route traffic
    depends_on:
      - web
      - api
    restart: unless-stopped

  web:
    image: tilshansanoj/github-actions:${TAG_WEB}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    command: npm start
    environment:
      - PORT=${WEB_PORT}
      - API_HOST=${API_HOST}
    networks:
      - backend
    depends_on:
      - api    
    restart: unless-stopped

  api:
    image: tilshansanoj/github-actions:${TAG_API}
    deploy:
      replicas: 2
    ports:
      - 8081-8082:8081
    command: npm start
    environment:
      - PORT=8081-8082:8081
      - DB=${API_DB}
    networks:
      - backend    
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:15.1-alpine
    volumes:
      - /data/mount:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5432:5432
    networks:
      - backend
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL",  "pg_isready"]
      interval: 10s
      timeout: 3s
      retries: 3   

networks:

  frontend:
    driver: bridge
    
  backend:
    driver: bridge
